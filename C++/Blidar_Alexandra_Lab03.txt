/*Blidar Alexandra, gr 2115, lab03, p2
Fie un sistem de calcul care urmareste controlul unui proces de transmisie a datelor pe o linie principala avand
un debit maxim de 40MB/s. Fluxul de date de pe aceasta linie este impartit de catre maxim 10 utilizatori,
traficul pe liniile oferite lor putandu se efectua cu debite intre 2 si 40 MB/s (valori intregi). Impartirea
debitelor pe cele maxim 10 linii se face in mod dinamic de catre sistemul de control considerand pentru fiecare
linie i, o pondere subunitara pi, asociata la configurarea sistemului functie de utilizator. Introduceti initial cele
maxim 10 ponderi pi astfel incat suma lor sa fie egala cu 1. Daca aceasta conditie este verificata generati toate
solutiile posibile considerand ca pe linia principala vom avea cel putin un debit de 2MB/s, deci de 2...40MB/s
determinand in aceste cazuri debitele posibile pe cele maxim 10 linii de intrare ale utilizatorilor (ajustate la
intregi MB/s). Se pune pe 0, daca nu se poate asigura minimul de 2MB/s. Afisati aceste solutii. Implementarea
poate fi recursiva sau nerecursiva.*/

#include<iostream>
using namespace std;

void afis(void);

int x[10], n = 1, c;
int nmin = 2, nmax = 40;
float p1, p2, p3, p4, p5, p6, p7, p8, p9, p10;

int main()
{
    int k;
    float p;
    cout << "Introduceti cele 10 ponderi:"<< endl <<"Prima pondere : ";
    cin >> p1;
    cout << "A doua pondere: ";
    cin >> p2;
    cout << "A treia pondere: ";
    cin >> p3;
    cout << "A patra pondere: ";
    cin >> p4;
    cout << "A cincea pondere: ";
    cin >> p5;
    cout << "A sasea pondere: ";
    cin >> p6;
    cout << "A saptea pondere: ";
    cin >> p7;
    cout << "A opta pondere: ";
    cin >> p8;
    cout << "A noua pondere: ";
    cin >> p9;
    cout << "A zecea pondere: ";
    cin >> p10;

    p = p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9 + p10;
    cout << "\n Introduceti fluxul de date.";

    while (n != 0)
    {
        cout << "\n Fluxul de date: ";
        cin >> n;
        if (n == nmax)
        {
            c = 0;
            k = 0;
            x[k] = 0;
            do
            {
                while (x[k] < nmax)
                {
                    x[k] = x[k] + 1;
                    if (x[k] > nmin - 1)
                        if (k == (10 - 1))
                            afis();
                        else
                        {
                            k++;
                            x[k] = 0;
                        }
                }
                k--;
            } while (!(k < 0));
        }
        else
            cout << "\nFlux invalid de date!";
    }
}
void afis(void)
{
    int i;
    double num;
    num = (double)(p1 * x[0] + p2 * x[1] + p3 * x[2] + p4 * x[3] + p5 * x[4] + p6 * x[5] + p7 * x[6] + p8 * x[7] + p9 * x[8] + p10 * x[9]);
    i = num;
    if (i == n)
    {
        cout << endl << " N1 = " << x[0] << " N2 = " << x[1] << " N3 = " << x[2] << " N4 = " << x[3] << " N5 = " << x[4] << " N6 = " << x[5] << " N7 = " << x[6] << " N8 = " << x[7] << " N9 = " << x[8] << " N10 = " << x[9];
        c++;
        if (c > 20)
        {
            c = 0;
            cout << "\n Introduceti un caracter pentru a continua: ";
        }
    }
}


/*Blidar Alexandra, gr 2115, Lab03, p5
Problema investirii optime de capital: pentru un investitor cu un capital C si n oferte la care trebuie avansate 
fondurile fi si care aduc beneficiile bi, se cere selectarea acelor oferte care ii aduc beneficiul maxim.*/


#include <iostream>
using namespace std;

void backtr(int k, int fi, int bi);
void salvare(int k, int max);
void afisare();

int n, c, bm, f[50], b[50], x[50], m[50], u[50];

int main()
{
    int i;
    cout << "Introduceti valoarea capitalului: ";
    cin >> c;
    cout << endl;
    cout << "Introduceti numarul de oferte : ";
    cin >> n;
    for (i = 1; i <= n; i++)
    {
        cout<< endl << " Introduceti fondurile si beneficiile necesare aduse pt oferta  " << i;
        cout << "Fondul f[" << i << "]=";
        cin >> f[i];
        cout << endl << "Beneficiul b[" << i << "]=";
        cin >> b[i];
    }
    bm = 0;

    backtr(0, 0, 0);

    int j;
    if (bm != 0)
    {
        cout << endl << " Beneficiul maxim este: " << bm << " obtinut investiind in ofertele: ";
        for (j = 1; j <= m[0]; j++)
            cout << m[j] << " ";
        cout << " \b\b \n";
    }
    else
        cout << endl << " Nu se poate investi, capitalul este prea mic!";
}

void afisare()
{
   
}

void salvare(int k, int max)
{
    int i;
    if (max > bm)
    {
        m[0] = k;
        for (i = 1; i <= k; i++)
            m[i] = x[i];
        bm = max;
    }
}

void backtr(int k, int fi, int bi)
{
    int i;
    if (fi > c)
        salvare(k - 2, bi - b[x[k - 1]]);
    else
        for (i = 1; i <= n; i++)
            if (!u[i])
            {
                x[k] = i;
                u[i] = 1;
                backtr(k + 1, fi + f[i], bi + b[i]);
                u[i] = 0;
            }
}


/*Blidar Alexandra, gr 2115, lab03, p7
Programul determina cmmdc-ul dintr un tablou unidimensional de numere intregi (max 2000 de valori), utilizand metoda divide et impera.*/

#include<iostream>
using namespace std;

int cmmdc(int prim, int ultim, int x[]);

int main()
{
    int n, x[2000], i;
    cout << "Numarul de elemente este: ";
    cin >> n;
    cout << "Elementele sunt:" << endl;
    for (i = 0; i < n; i++)
        cin >> x[i];
    cout << endl << " Cel mai mare divizor comun din vector este: " << cmmdc(0, n, x);
    return 0;
}

int cmmdc(int prim, int ultim, int x[])
{
    int mij, m1, m2, r;
    if (prim == ultim)
        return x[prim];
    else
    {
        mij = (prim + ultim) / 2;
        m1 = cmmdc(prim, mij, x);
        m2 = cmmdc(mij + 1, ultim, x);
        r = m1 % m2;
        while (r)
        {
            m1 = m2;
            m2 = r;
            r = m1 % m2;
        }
        return m2;
    }
}


/*Blidar Alexandra, gr 2115, lab03, p9
Programul genereaza aleator 10 valoriintregi, ce vor fi memorate intr un tablou unidimensional. Sa se verifice daca o alta valoare generata 
aleator apartine acestui tablou, folosind functia _lsearch().*/

#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
#include<time.h>
#include<search.h>

int compara(int *,int *);
int cautare_adaugare(int *,int *,int );

int main(){
        int *p=NULL,*a=NULL,k,n=10,i; 
        p=(int*)malloc(11*sizeof(int)); 
        if(p!=NULL) { 
                srand((unsigned)time(NULL)); 
                for(i=0;i<n;i++) 
                        *(p+i)=(int) rand(); 
                printf("Tabloul obtinut este:\n"); 
                for(i=0;i<10;i++) 
                        printf("%d ",*(p+i));
                k=(int) rand(); 
                a=&k; 
                printf("\n\nNumarul generat ce trebuie cautat in vector este %d\n",k); 
                if(cautare_adaugare(a,p,n)) printf("\nNumarul %d exista deja\n",*a); 
                else
                {
                        printf("\nNumarul %d a fost adaugat in vector pe ultima pozitie\n", *a); 
                        printf("\nVectorul nou obtinut este:\n"); 
                        for (i = 0;i < n;i++) 
                                printf("%d ", *(p + i)); 
                        printf("\n");
                }
        }
        else { 
                printf("\nAlocare nereusita\n"); 
                return 0; 
        } 
        if (p)
                free(p);
}
int cautare_adaugare(int* a, int* p, int n) { 
        int m = n; 
        _lsearch(a, p, (size_t*)&n, sizeof(int), (int(*)(const void*, const void*))compara); 
        return(n == m); 
}
int compara(int* a, int* b) { 
        return(*a - *b); 
}


/*Blidar Alexandra, gr 2115, lB03, P11
Programul citeste un tablou unidemensional de maxim 20 de valori intregi. Folosind mecanismul de cautare binara, determinati daca o noua valoare, a, introdusa 
de la tastatura exista in sir. Daca da, determinati toti factorii primi ai acestei valori pe care ii veti afisa pe ecran.*/

#include<iostream>  
using namespace std;  

int cautBinara(int a[], int p, int n); 
void fPrimi(int n); 
int main() 
{     
        int a[20], n, i, b;     
        cout << "Introduceti lungimea vectorului: ";     
        cin >> n;     
        for(i = 0; i < n; i ++)         
                cin >> a[i];    
        cout << "Introduceti valoarea ce trebuie cautata: ";     
        cin >> b;          
        if (cautBinara(a, b, n) == 1)     
        {         
                cout <<endl<< "Numarul apare in sir." << endl;         
                fPrimi(b);         
                cout << endl;     
        }     
        else         
                cout << "Numarul nu apare in sir." << endl; 
} 
int cautBinara(int a[], int p, int n) 
{
        int s = 0, d = n;     
        while(s <= d)     
        {        
                int  mij = (s + d)/2;         
                if(a[mij] == p)             
                        return 1;         
                else             
                        if(p < a[mij])                 
                                d = mij - 1;              
                        else                  
                                s = mij + 1;     
        }     
        return 0; 
} 
void fPrimi(int n) 
{     
        int d = 2;     
        while(n > 1)     
        {         
                int p = 0;         
                while(n % d == 0)             
                {                 
                        p++;                
                        n = n/d;            
                }         
                if(p > 0)           
                        cout << d << " ";     
                d = d + 1;     
        } 
}  